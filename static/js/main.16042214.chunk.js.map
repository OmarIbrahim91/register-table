{"version":3,"sources":["components/AddUser.js","components/UsersList.js","App.js","serviceWorker.js","index.js"],"names":["AddUser","state","fname","lname","dob","gender","onSubmit","e","preventDefault","props","add","setState","handleFormChanges","formElem","target","name","elemValue","value","console","log","className","this","type","id","onChange","onClick","Component","Users","deleteU","userId","del","user","map","u","index","key","firstName","lastName","dateofbirth","App","users","addUser","stateObj","newUser","uuid","v4","push","forceUpdate","deleteUser","uid","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16042214.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class AddUser extends Component {\n  state = {\n    fname: \"\",\n    lname: \"\",\n    dob: \"\",\n    gender: \"\"\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.add(this.state);\n    this.setState({\n      fname: \"\",\n      lname: \"\",\n      dob: \"\",\n      gender: \"\"\n    });\n  };\n\n\n  handleFormChanges = e => {\n    const formElem = e.target.name;\n    const elemValue = e.target.value;\n    this.setState({\n      [formElem]: elemValue\n    });\n    console.log(this.state);\n  };\n\n  render() {\n    return (\n      <div className=\"regCont container bg-info rounded-top\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-inline row p-3\">\n            <label className=\"col-md-2\">FirstName:</label>\n            <input\n              type=\"text\"\n              name=\"fname\"\n              id=\"fn\"\n              className=\"col-md-4 form-control\"\n              value={this.state.fname}\n              onChange={this.handleFormChanges}\n            />\n            <label className=\"col-md-2\">LastName:</label>\n            <input\n              type=\"text\"\n              name=\"lname\"\n              id=\"ln\"\n              className=\"col-md-4 form-control\"\n              value={this.state.lname}\n              onChange={this.handleFormChanges}\n            />\n          </div>\n          <div className=\"form-inline row pl-3 pt-3\">\n            <label className=\"col-md-2\">DateOfBirth:</label>\n            <input\n              type=\"Date\"\n              name=\"dob\"\n              id=\"dob\"\n              className=\"col-md-4 form-control\"\n              value={this.state.dob}\n              onChange={this.handleFormChanges}\n            />\n            <label className=\"col-md-2\">Gender:</label> Male\n            <input\n              type=\"radio\"\n              name=\"gender\"\n              id=\"gender\"\n              value=\"male\"\n              className=\"ml-1\"\n              onClick={this.handleFormChanges}\n            />\n            <label className=\"ml-5\">Female</label>\n            <input\n              type=\"radio\"\n              name=\"gender\"\n              id=\"gender\"\n              value=\"female\"\n              className=\"ml-1\"\n              onClick={this.handleFormChanges}\n            />\n          </div>\n          <center>\n            <input\n              type=\"submit\"\n              value=\"Register\"\n              className=\"btn btn-outline-dark btn-light m-3 mt-5 pl-5 pr-5\"\n            />\n          </center>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddUser;\n","import React, { Component } from \"react\";\n\nexport class Users extends Component {\n  deleteU = e => {\n    e.preventDefault();\n    const userId = e.target.id;\n    this.props.del(userId);\n  };\n  render() {\n    return this.props.user.map((u, index) => (\n      <tr key={u.id}>\n        <td className=\"p-0\">\n          <center>{index + 1}</center>\n        </td>\n        <td>{u.firstName}</td>\n        <td>{u.lastName}</td>\n        <td>{u.dateofbirth}</td>\n        <td>{u.gender}</td>\n        <td>\n          <button\n            className=\"btn btn-danger btn-xsm\"\n            onClick={this.deleteU}\n            id={index}\n          >\n            x\n          </button>\n        </td>\n      </tr>\n    ));\n  }\n}\n\nexport default Users;\n","import React from \"react\";\nimport \"./App.css\";\nimport AddUser from \"./components/AddUser\";\nimport Users from \"./components/UsersList\";\nimport uuid from \"uuid\";\n\nclass App extends React.Component {\n  state = {\n    users: [\n  \n    ]\n  };\n\n  addUser = stateObj => {\n    const newUser = {\n      firstName: stateObj.fname,\n      lastName: stateObj.lname,\n      dateofbirth: stateObj.dob,\n      gender: stateObj.gender,\n      id: uuid.v4()\n    };\n    this.state.users.push(newUser);\n    //this.setState({ users: [...this.state.users, newUser] });\n    this.forceUpdate();\n    console.log(\"State:\");\n    console.log(this.state);\n  };\n\n  //delete users\n  deleteUser = uid => {\n    console.log(uid);\n    delete this.state.users[uid];\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3 className=\"welcome\">Registration Form</h3>\n        <AddUser add={this.addUser} />\n        <table className=\"table container bg-secondary text-light mt-5\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Date of Birth</th>\n              <th>Gender</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-info\">\n            <Users user={this.state.users} del={this.deleteUser} />\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}